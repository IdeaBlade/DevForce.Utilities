
using IdeaBlade.Core;
using IdeaBlade.Core.Reflection;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading;
using System.Windows.Forms;


namespace IdeaBlade.DevTools.TraceViewer {

  /// <summary>
  /// A window that provides a real-time display surface for any trace messages from a DevForce application.
  /// <seealso cref="T:IdeaBlade.Core.TraceFns"/>
  /// </summary>
  /// <remarks>
  /// Any messages written to the <b>LogFile</b> specified in the IdeaBlade
  /// Configuration file will also be displayed here.  Note that messages
  /// sent to the log before this window is opened will not be shown.
  /// <para>
  /// The <b>TraceViewerForm</b> is used by the DevForce Trace Viewer utility, but
  /// may also be used by developers for their own applications.  When using the
  /// <b>TraceViewerForm</b> directly, construct an instance of the window and provide either:
  /// <para>
  /// 1) No arguments if you want to view tracing messages produced from within your (client) application.
  /// <code>
  ///    TraceViewerForm tv = new TraceViewerForm();
  ///    tv.Show();
  /// </code>
  /// </para>
  /// <para>
  /// 2) A URL for the "trace publisher" used by the BOS. This URL will typically be something
  /// like "net.tcp://yourservername:9922/TracePublisher" unless you have overridden defaults in
  /// the <see cref="IdeaBlade.Core.Configuration.LoggingElement">logging</see> element of the
  /// IdeaBlade configuration.  Use this option to view tracing messages from the BOS or other
  /// application instance, not from your client application.
  /// <code>
  ///    string url = "net.tcp://myBOSserver:9922/TracePublisher";
  ///    TraceViewerForm tv = new TraceViewerForm(url);
  ///    tv.Show();
  /// </code>
  /// </para>
  /// </para>
  /// <para>
  /// Do not use the <b>TraceViewerForm</b> from a console application.  As a Windows application 
  /// the trace viewer requires a message pump.
  /// </para>
  /// <para>
  /// In order to use the <b>TraceViewerForm</b> directly from you application 
  /// you will need to add references to the following assemblies: WinTraceViewer.exe and
  /// System.Windows.Forms.  Also be sure to 
  /// add a Using (Imports in Visual Basic) statement for the "IdeaBlade.DevTools.WinTraceViewer"
  /// namespace.
  /// </para>
  /// </remarks>
  public class TraceViewerForm : System.Windows.Forms.Form {

    /// <summary>
    /// Create a trace viewer window to view tracing messages from within the current application.
    /// </summary>
    /// <remarks>
    /// Use this constructor to open a window which by default will display tracing messages
    /// generated from the current application.  You will still be able to subscribe to messages
    /// generated by a BOS by using the "Unsubscribe" and "Subscribe" buttons.
    /// </remarks>
    public TraceViewerForm() {
      Initialize();
      Subscribe(null, null);
    }

    /// <summary>
    /// Create a new TraceViewerForm subscribed to the specified <see cref="TracePublisher"/>.
    /// </summary>
    /// <param name="pTracePublisher"></param>
    /// <remarks>
    /// Internal use only.
    /// </remarks>
    public TraceViewerForm(TracePublisher pTracePublisher) {
      Initialize();
      Subscribe(null, pTracePublisher);
    }

    /// <summary>
    /// Construct a trace viewer window to view tracing messages generated by a BOS.
    /// </summary>
    /// <param name="pTracePublisherURL"></param>
    /// <remarks>
    /// The URL provided will typically be something like "net.tcp://yourservername:9922/TracePublisher" 
    /// unless you have overridden defaults in the <see cref="IdeaBlade.Core.Configuration.LoggingElement">logging</see> element of the
    /// IdeaBlade configuration.
    /// <para>
    /// Note that the BOS must be "publishing" tracing messages.  If your BOS is hosted by either
    /// the ServerConsole or ServiceService then publishing is on by default.  If your BOS is
    /// hosted by IIS, you must enable publishing by calling 
    /// <see cref="IdeaBlade.Core.TracePublisher.MakeRemotable()">TracePublisher.LocalInstance.MakeRemotable()</see>
    /// from the application startup logic in the global.asax.
    /// </para>
    /// </remarks>
    public TraceViewerForm(String pTracePublisherURL) {
      Initialize();
      Subscribe(pTracePublisherURL, null);
    }

    /// <summary>
    /// Gets or sets the number of seconds to wait before checking if a remote TracePublisher is still active.
    /// </summary>
    /// <remarks>
    /// By default, the TracePublisher is pinged every 10 seconds.
    /// </remarks>
    public int PingPublisherSeconds {
      get { return mPingPublisherSeconds; }
      set { mPingPublisherSeconds = value; }
    }

    // -------------  Private & Protected ------------------------------

    /// <summary>
    /// Delegates used in BeginInvoke calls.
    /// </summary>
    internal delegate void TraceEventHandler(TraceMessage pMessage);
    internal delegate void SimpleEventHandler();

    #region private properties

    private String GetPublisherName(bool pInSubscribe) {
      if (IsRemotePublisher) {
        return mRemoteTracePublisherURL;
      }
      if (mTraceSubscriber.IsSubscribed || pInSubscribe) {
        return "Local Publisher";
      } else {
        return "Not subscribed ";
      }
    }

    private bool Suspended {
      get {
        return mSuspended;
      }
      set {
        if (mSuspended == value) return;
        if (!value) {
          mSuspendedList.ForEach(i => mTraceList.Add(i));
          // mTraceList.AddRange(mSuspendedList);
          mSuspendedList.Clear();
          if (mTraceList.Count > 1) {
            mDataGridView.FirstDisplayedScrollingRowIndex = mTraceList.Count - 1;
          }
        }
        mSuspended = value;
      }
    }

    private bool IsRemotePublisher {
      get { return !string.IsNullOrEmpty(mRemoteTracePublisherURL); }
    }

    #endregion

    #region Initialization

    private void Initialize() {
      InitializeComponent();
      mTraceSubscriber = new TraceSubscriber();
      InitializeEvents();
      InitializeGrid();
    }

    private void InitializeGrid() {

      mSuspendedList = new List<TraceMessage>();
      mBindingSource.DataSource = mTraceList;
      AddColumn("Id", "Event Id", typeof(Int32));
      AddColumn("Source", "Source", typeof(String));
      AddColumn("UserName", "User Name", typeof(String));
      AddColumn("Message", "Message", typeof(String));
      AddColumn("Timestamp", "Timestamp", typeof(DateTime));

      mDataGridView.DataSource = mBindingSource;
      InitializeGridView(mDataGridView);
    }

    private DataGridViewColumn AddColumn(String propertyName, String headerText, Type dataType) {
      var column = new DataGridViewTextBoxColumn();
      column.DataPropertyName = propertyName;
      column.HeaderText = headerText;
      column.ValueType = dataType;

      column.Resizable = DataGridViewTriState.True;
      column.SortMode = DataGridViewColumnSortMode.Automatic; // needed because otherwise all non text columns will not be sortable

      if (TypeFns.IsNumericType(dataType)) {
        column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
        column.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
      } else if (dataType == typeof(DateTime)) {
        column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
        column.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
        column.DefaultCellStyle.Format = "G";  // short date, long time
      }

      mDataGridView.Columns.Add(column);
      return column;

    }


    private void InitializeEvents() {

      EventHandler handler;

      this.mExitMenuItem.Click += new EventHandler(ExitHandler);

      this.Resize += new EventHandler(ResizeHandler);

      handler = new EventHandler(SuspendResumeHandler);
      mHandlerMap[this.mSuspendResumeButton] = handler;
      this.mSuspendResumeMenuItem.Click += handler;

      handler = new EventHandler(SubscribeHandler);
      mHandlerMap[this.mSubscribeButton] = handler;
      this.mSubscribeMenuItem.Click += handler;

      handler = new EventHandler(UnsubscribeHandler);
      mHandlerMap[this.mUnsubscribeButton] = handler;
      this.mUnsubscribeMenuItem.Click += handler;

      this.mDataGridView.CellContentDoubleClick += new DataGridViewCellEventHandler(DataGridView_CellContentDoubleClick);
      this.mToolBar.ButtonClick +=
        new ToolBarButtonClickEventHandler(ToolBarButtonClickedHandler);

      mTraceSubscriber.Publish += new EventHandler<PublishEventArgs>(TraceSubscriberPublishHandler);
    }

    private void InitializeGridView(DataGridView pGridView) {
      pGridView.ScrollBars = ScrollBars.Both;
      pGridView.AllowUserToAddRows = false;
      pGridView.AllowUserToDeleteRows = false;
      pGridView.AllowUserToResizeRows = false;
      pGridView.RowHeadersVisible = false;

      pGridView.AllowUserToOrderColumns = true;
      pGridView.AllowUserToResizeColumns = true;
      // Deliberately allow this - under some condition this will allow columns to be shorter after resize
      pGridView.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;

      pGridView.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.DisplayedCells);
    }

    #endregion

    #region Subscription and display related

    /// <summary>
    /// Will never receive both parms - either both will be null or only one will be set.
    /// </summary>
    /// <param name="pTracePublisherURL">Remote Publisher uri</param>
    /// <param name="pTracePublisher">Existing local publisher</param>
    private void Subscribe(String pTracePublisherURL, TracePublisher pTracePublisher) {
      mRemoteTracePublisherURL = pTracePublisherURL;
      string publisherName = GetPublisherName(true);

      lock (this) {
        InvokeCaptureTraceMessage(new TraceMessage(null, "Attempting connection to " + publisherName, false));
        try {
          if (pTracePublisher != null) {
            mTraceSubscriber.StartSubscription(pTracePublisher);
          } else if (!string.IsNullOrEmpty(pTracePublisherURL)) {
            mTraceSubscriber.StartSubscription(pTracePublisherURL);
          } else {
            mTraceSubscriber.StartSubscription();
          }
          InvokeCaptureTraceMessage(new TraceMessage(null, "Connected to " + publisherName, false));
        } catch (Exception ex) {
          InvokeCaptureTraceMessage(new TraceMessage(null,
             string.Format("Error connecting to {0}. Error: {1}", publisherName, ex.Message),
             false));
        }
        if (IsRemotePublisher && mTimer == null) {
          mTimer = new System.Threading.Timer(new TimerCallback(PingTimerCallback), null,
            PingPublisherSeconds * 1000, PingPublisherSeconds * 1000);
        }
      }
      InvokeUpdateUI();
    }

    private void Unsubscribe() {
      InvokeCaptureTraceMessage(new TraceMessage(null, "Unsubscribing from " + GetPublisherName(false), false));
      mTraceSubscriber.StopSubscription();
      mRemoteTracePublisherURL = null;
      mTimer = null;
      InvokeUpdateUI();
    }

    private void PingTimerCallback(Object pState) {
      if (this.mIsDisposing) return;
      if (!IsRemotePublisher) return;
      if (mTraceSubscriber.IsSubscribed) {
        if (!mTraceSubscriber.PingPublisher()) {
          InvokeCaptureTraceMessage(new TraceMessage(null, "Connection lost: " + mRemoteTracePublisherURL, false));
          InvokeUpdateUI();
        }
      } else {
        Subscribe(mRemoteTracePublisherURL, null);
        InvokeUpdateUI();
      }
    }

    private void InvokeCaptureTraceMessage(TraceMessage pMessage) {
      if (this.mIsDisposing) return;
      if (InvokeRequired) {
        BeginInvoke(new TraceEventHandler(CaptureTraceMessage), pMessage);
      } else {
        CaptureTraceMessage(pMessage);
      }
    }

    private void CaptureTraceMessage(TraceMessage pMessage) {
      if (Suspended) {
        mSuspendedList.Add(pMessage);
        if (mSuspendedList.Count > MaxSize) {
          mSuspendedList.RemoveRange(0, RemovalCount);
        }
      } else {
        mTraceList.Add(pMessage);
        if (mTraceList.Count > MaxSize) {
          // mTraceList.RemoveRange(0, RemovalCount);
          for (int i = 0; i < RemovalCount; i++) mTraceList.RemoveAt(0);
        }
        if (mTraceList.Count > 1) {
          // TODO: review later
          try {
            mDataGridView.FirstDisplayedScrollingRowIndex = mTraceList.Count - 1;
          } catch { }
        }
        if (mTraceList.Count == 5) {
          AutoSizeColumns();
        }
      }
    }

    private void InvokeUpdateUI() {
      if (InvokeRequired) {
        this.BeginInvoke(new SimpleEventHandler(UpdateUI));
      } else {
        UpdateUI();
      }
    }

    private void UpdateUI() {
      if (this.Controls.Count == 0) return;
      if (this.mIsDisposing) return;
      this.Text = String.Format("Trace Viewer: [{0}]", GetPublisherName(false));
      bool enabled = (mTraceSubscriber.IsSubscribed || IsRemotePublisher);
      mSuspendResumeButton.Enabled = enabled;
      mSuspendResumeMenuItem.Enabled = enabled;
      mUnsubscribeButton.Enabled = enabled;
      mUnsubscribeMenuItem.Enabled = enabled;
      mSubscribeButton.Enabled = !enabled;
      mSubscribeMenuItem.Enabled = !enabled;
      if (Suspended) {
        mSuspendResumeButton.ImageIndex = 0;
        mSuspendResumeButton.Text = "Suspended";
        this.mSuspendResumeMenuItem.Text = "Resume Tracing";
      } else {
        mSuspendResumeButton.ImageIndex = 1;
        mSuspendResumeButton.Text = "Running";
        this.mSuspendResumeMenuItem.Text = "Suspend Tracing";
      }
    }
    #endregion

    #region Event Handlers

    private void DataGridView_CellContentDoubleClick(object sender, DataGridViewCellEventArgs e) {
      TraceMessage msg = (TraceMessage)mDataGridView.Rows[e.RowIndex].DataBoundItem;
      if (msg == null) return;
      TraceMessageDialog.Show(this, msg);
    }

    private void ExitHandler(Object pSender, EventArgs pArgs) {
      Unsubscribe();
      this.Close();
    }

    private void SuspendResumeHandler(Object pSender, EventArgs pArgs) {
      Suspended = !Suspended;
      UpdateUI();
    }

    private void SubscribeHandler(Object pSender, EventArgs pArgs) {
      TraceViewerSubscriptionDialog dialog = new TraceViewerSubscriptionDialog(mTraceSubscriber.Protocol);
      DialogResult result = dialog.ShowDialog(this);
      if (result == DialogResult.Cancel) return;
      mRemoteTracePublisherURL = dialog.URL;
      Subscribe(mRemoteTracePublisherURL, null);
    }

    private void UnsubscribeHandler(Object pSender, EventArgs pArgs) {
      Unsubscribe();
    }

    private void ResizeHandler(Object pSender, EventArgs pArgs) {
      if (this.WindowState == FormWindowState.Minimized) {
        if (mWasMinimized) return;
        mWasMinimized = true;
        mPreMinimizedState = Suspended;
        Suspended = true;
      } else {
        if (mWasMinimized) {
          mWasMinimized = false;
          Suspended = mPreMinimizedState;
        }
      }
      UpdateUI();
    }

    private void ToolBarButtonClickedHandler(Object pSender, ToolBarButtonClickEventArgs pArgs) {
      EventHandler aHandler = this.mHandlerMap[pArgs.Button] as EventHandler;
      if (aHandler != null) {
        aHandler(null, null);
      }
    }

    private void TraceSubscriberPublishHandler(object sender, PublishEventArgs e) {
      InvokeCaptureTraceMessage(e.TraceMessage);
    }

    #endregion

    #region misc
    private void AutoSizeColumns() {
      mDataGridView.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.DisplayedCells);
    }

    /// <summary>
    /// Clean up any resources being used.
    /// </summary>
    protected override void Dispose(bool disposing) {
      this.mIsDisposing = true;
      if (disposing) {
        if (mTraceSubscriber != null) {
          if (mTraceSubscriber.IsSubscribed) {
            mTraceSubscriber.StopSubscription();
            mTraceSubscriber = null;
            mTimer = null;
          }
        }
        if (components != null) {
          components.Dispose();
        }
      }
      base.Dispose(disposing);
    }
    #endregion

    #region Windows Form Designer generated code
    /// <summary>
    /// Required method for Designer support, do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent() {
      this.components = new System.ComponentModel.Container();
      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TraceViewerForm));
      this.mStatusBar = new System.Windows.Forms.StatusBar();
      this.mMessagePanel = new System.Windows.Forms.StatusBarPanel();
      this.mImageList = new System.Windows.Forms.ImageList(this.components);
      this.mSaveFileDialog = new System.Windows.Forms.SaveFileDialog();
      this.mOpenFileDialog = new System.Windows.Forms.OpenFileDialog();
      this.mMainMenu = new System.Windows.Forms.MainMenu(this.components);
      this.mViewMenuItem = new System.Windows.Forms.MenuItem();
      this.mSubscribeMenuItem = new System.Windows.Forms.MenuItem();
      this.mUnsubscribeMenuItem = new System.Windows.Forms.MenuItem();
      this.menuItem1 = new System.Windows.Forms.MenuItem();
      this.mSuspendResumeMenuItem = new System.Windows.Forms.MenuItem();
      this.menuItem5 = new System.Windows.Forms.MenuItem();
      this.mExitMenuItem = new System.Windows.Forms.MenuItem();
      this.mToolBar = new System.Windows.Forms.ToolBar();
      this.mSubscribeButton = new System.Windows.Forms.ToolBarButton();
      this.mUnsubscribeButton = new System.Windows.Forms.ToolBarButton();
      this.mSuspendResumeButton = new System.Windows.Forms.ToolBarButton();
      this.mBindingSource = new System.Windows.Forms.BindingSource(this.components);
      this.mDataGridView = new System.Windows.Forms.DataGridView();
      this.label1 = new System.Windows.Forms.Label();
      ((System.ComponentModel.ISupportInitialize)(this.mMessagePanel)).BeginInit();
      ((System.ComponentModel.ISupportInitialize)(this.mBindingSource)).BeginInit();
      ((System.ComponentModel.ISupportInitialize)(this.mDataGridView)).BeginInit();
      this.SuspendLayout();
      // 
      // mStatusBar
      // 
      this.mStatusBar.Location = new System.Drawing.Point(0, 385);
      this.mStatusBar.Name = "mStatusBar";
      this.mStatusBar.Panels.AddRange(new System.Windows.Forms.StatusBarPanel[] {
            this.mMessagePanel});
      this.mStatusBar.ShowPanels = true;
      this.mStatusBar.Size = new System.Drawing.Size(655, 24);
      this.mStatusBar.TabIndex = 2;
      // 
      // mMessagePanel
      // 
      this.mMessagePanel.AutoSize = System.Windows.Forms.StatusBarPanelAutoSize.Spring;
      this.mMessagePanel.Name = "mMessagePanel";
      this.mMessagePanel.Width = 638;
      // 
      // mImageList
      // 
      this.mImageList.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("mImageList.ImageStream")));
      this.mImageList.TransparentColor = System.Drawing.Color.Transparent;
      this.mImageList.Images.SetKeyName(0, "");
      this.mImageList.Images.SetKeyName(1, "");
      this.mImageList.Images.SetKeyName(2, "");
      this.mImageList.Images.SetKeyName(3, "");
      // 
      // mSaveFileDialog
      // 
      this.mSaveFileDialog.DefaultExt = "orm";
      this.mSaveFileDialog.FileName = "Mappings.orm";
      // 
      // mOpenFileDialog
      // 
      this.mOpenFileDialog.ShowHelp = true;
      // 
      // mMainMenu
      // 
      this.mMainMenu.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.mViewMenuItem});
      // 
      // mViewMenuItem
      // 
      this.mViewMenuItem.Index = 0;
      this.mViewMenuItem.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.mSubscribeMenuItem,
            this.mUnsubscribeMenuItem,
            this.menuItem1,
            this.mSuspendResumeMenuItem,
            this.menuItem5,
            this.mExitMenuItem});
      this.mViewMenuItem.Text = "&View";
      // 
      // mSubscribeMenuItem
      // 
      this.mSubscribeMenuItem.Index = 0;
      this.mSubscribeMenuItem.Text = "&Subscribe to...";
      // 
      // mUnsubscribeMenuItem
      // 
      this.mUnsubscribeMenuItem.Index = 1;
      this.mUnsubscribeMenuItem.Text = "&Unsubscribe";
      // 
      // menuItem1
      // 
      this.menuItem1.Index = 2;
      this.menuItem1.Text = "-";
      // 
      // mSuspendResumeMenuItem
      // 
      this.mSuspendResumeMenuItem.Index = 3;
      this.mSuspendResumeMenuItem.Text = "Suspend &Tracing";
      // 
      // menuItem5
      // 
      this.menuItem5.Index = 4;
      this.menuItem5.Text = "-";
      // 
      // mExitMenuItem
      // 
      this.mExitMenuItem.Index = 5;
      this.mExitMenuItem.Text = "E&xit";
      // 
      // mToolBar
      // 
      this.mToolBar.Buttons.AddRange(new System.Windows.Forms.ToolBarButton[] {
            this.mSubscribeButton,
            this.mUnsubscribeButton,
            this.mSuspendResumeButton});
      this.mToolBar.DropDownArrows = true;
      this.mToolBar.ImageList = this.mImageList;
      this.mToolBar.Location = new System.Drawing.Point(0, 0);
      this.mToolBar.Name = "mToolBar";
      this.mToolBar.ShowToolTips = true;
      this.mToolBar.Size = new System.Drawing.Size(655, 42);
      this.mToolBar.TabIndex = 6;
      // 
      // mSubscribeButton
      // 
      this.mSubscribeButton.ImageIndex = 2;
      this.mSubscribeButton.Name = "mSubscribeButton";
      this.mSubscribeButton.Text = "Subscribe";
      // 
      // mUnsubscribeButton
      // 
      this.mUnsubscribeButton.ImageIndex = 3;
      this.mUnsubscribeButton.Name = "mUnsubscribeButton";
      this.mUnsubscribeButton.Text = "Unsubscribe";
      // 
      // mSuspendResumeButton
      // 
      this.mSuspendResumeButton.ImageIndex = 0;
      this.mSuspendResumeButton.Name = "mSuspendResumeButton";
      this.mSuspendResumeButton.Text = "Suspend";
      // 
      // mDataGridView
      // 
      this.mDataGridView.AutoGenerateColumns = false;
      this.mDataGridView.DataSource = this.mBindingSource;
      this.mDataGridView.Dock = System.Windows.Forms.DockStyle.Fill;
      this.mDataGridView.Location = new System.Drawing.Point(0, 42);
      this.mDataGridView.Name = "mDataGridView";
      this.mDataGridView.Size = new System.Drawing.Size(655, 343);
      this.mDataGridView.TabIndex = 7;
      this.mDataGridView.Text = "dataGridView1";
      // 
      // label1
      // 
      this.label1.AutoSize = true;
      this.label1.Location = new System.Drawing.Point(237, 9);
      this.label1.Name = "label1";
      this.label1.Size = new System.Drawing.Size(207, 13);
      this.label1.TabIndex = 8;
      this.label1.Text = "Double-click on any row to see more detail";
      // 
      // TraceViewerForm
      // 
      this.ClientSize = new System.Drawing.Size(655, 409);
      this.Controls.Add(this.label1);
      this.Controls.Add(this.mDataGridView);
      this.Controls.Add(this.mToolBar);
      this.Controls.Add(this.mStatusBar);
      this.HelpButton = true;
      this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
      this.Menu = this.mMainMenu;
      this.Name = "TraceViewerForm";
      this.Text = "Trace Viewer";
      ((System.ComponentModel.ISupportInitialize)(this.mMessagePanel)).EndInit();
      ((System.ComponentModel.ISupportInitialize)(this.mBindingSource)).EndInit();
      ((System.ComponentModel.ISupportInitialize)(this.mDataGridView)).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();

    }
    #endregion

    private const int MaxSize = 2000;
    private const int RemovalCount = 1000;

    private System.Threading.Timer mTimer;

    private String mRemoteTracePublisherURL;
    private TraceSubscriber mTraceSubscriber;
    private int mPingPublisherSeconds = 10;
    private TraceList mTraceList = new TraceList();
    private Dictionary<ToolBarButton, EventHandler> mHandlerMap = new Dictionary<ToolBarButton, EventHandler>();
    private bool mSuspended;
    private List<TraceMessage> mSuspendedList;

    private bool mWasMinimized = false;
    private bool mIsDisposing = false;
    private bool mPreMinimizedState;

    #region Form controls
    private System.Windows.Forms.StatusBar mStatusBar;
    private System.Windows.Forms.SaveFileDialog mSaveFileDialog;
    private System.Windows.Forms.OpenFileDialog mOpenFileDialog;
    private System.Windows.Forms.ImageList mImageList;
    private System.Windows.Forms.MainMenu mMainMenu;
    private System.Windows.Forms.StatusBarPanel mMessagePanel;
    private System.Windows.Forms.MenuItem mViewMenuItem;
    private System.Windows.Forms.MenuItem mExitMenuItem;

    private System.Windows.Forms.ToolBar mToolBar;
    private System.Windows.Forms.MenuItem menuItem1;
    private System.Windows.Forms.MenuItem menuItem5;
    private System.Windows.Forms.ToolBarButton mSubscribeButton;
    private System.Windows.Forms.ToolBarButton mUnsubscribeButton;
    private System.Windows.Forms.ToolBarButton mSuspendResumeButton;
    private System.Windows.Forms.MenuItem mSubscribeMenuItem;
    private System.Windows.Forms.MenuItem mUnsubscribeMenuItem;
    private System.Windows.Forms.MenuItem mSuspendResumeMenuItem;
    private BindingSource mBindingSource;
    private DataGridView mDataGridView;
    private Label label1;
    private System.ComponentModel.IContainer components;
    #endregion

    private class TraceList : BindingList<TraceMessage> {
      

    }

  }
}
